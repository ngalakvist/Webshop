#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="BookShop")]
public partial class TheBookShopDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertProductCategory(ProductCategory instance);
  partial void UpdateProductCategory(ProductCategory instance);
  partial void DeleteProductCategory(ProductCategory instance);
  partial void InsertOrder(Order instance);
  partial void UpdateOrder(Order instance);
  partial void DeleteOrder(Order instance);
  partial void InsertProduct(Product instance);
  partial void UpdateProduct(Product instance);
  partial void DeleteProduct(Product instance);
  partial void InsertOrderLine(OrderLine instance);
  partial void UpdateOrderLine(OrderLine instance);
  partial void DeleteOrderLine(OrderLine instance);
  #endregion
	
	public TheBookShopDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["BookShopConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public TheBookShopDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public TheBookShopDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public TheBookShopDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public TheBookShopDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<ProductCategory> ProductCategories
	{
		get
		{
			return this.GetTable<ProductCategory>();
		}
	}
	
	public System.Data.Linq.Table<Order> Orders
	{
		get
		{
			return this.GetTable<Order>();
		}
	}
	
	public System.Data.Linq.Table<Product> Products
	{
		get
		{
			return this.GetTable<Product>();
		}
	}
	
	public System.Data.Linq.Table<OrderLine> OrderLines
	{
		get
		{
			return this.GetTable<OrderLine>();
		}
	}
}

[Table(Name="dbo.ProductCategory")]
public partial class ProductCategory : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CategoryId;
	
	private string _Name;
	
	private EntitySet<Product> _Products;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public ProductCategory()
	{
		this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
		OnCreated();
	}
	
	[Column(Storage="_CategoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int CategoryId
	{
		get
		{
			return this._CategoryId;
		}
		set
		{
			if ((this._CategoryId != value))
			{
				this.OnCategoryIdChanging(value);
				this.SendPropertyChanging();
				this._CategoryId = value;
				this.SendPropertyChanged("CategoryId");
				this.OnCategoryIdChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(50)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Association(Name="ProductCategory_Product", Storage="_Products", OtherKey="CatgryId")]
	public EntitySet<Product> Products
	{
		get
		{
			return this._Products;
		}
		set
		{
			this._Products.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Products(Product entity)
	{
		this.SendPropertyChanging();
		entity.ProductCategory = this;
	}
	
	private void detach_Products(Product entity)
	{
		this.SendPropertyChanging();
		entity.ProductCategory = null;
	}
}

[Table(Name="dbo.Orders")]
public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _OrderID;
	
	private System.DateTime _OrderDate;
	
	private System.Nullable<System.DateTime> _OrderSentDate;
	
	private string _MemberName;
	
	private string _Name;
	
	private string _Address;
	
	private string _County;
	
	private string _PostCode;
	
	private string _Country;
	
	private System.Nullable<decimal> _SubTotal;
	
	private System.Nullable<decimal> _Discount;
	
	private System.Nullable<decimal> _Total;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnOrderDateChanging(System.DateTime value);
    partial void OnOrderDateChanged();
    partial void OnOrderSentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOrderSentDateChanged();
    partial void OnMemberNameChanging(string value);
    partial void OnMemberNameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCountyChanging(string value);
    partial void OnCountyChanged();
    partial void OnPostCodeChanging(string value);
    partial void OnPostCodeChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnSubTotalChanging(System.Nullable<decimal> value);
    partial void OnSubTotalChanged();
    partial void OnDiscountChanging(System.Nullable<decimal> value);
    partial void OnDiscountChanged();
    partial void OnTotalChanging(System.Nullable<decimal> value);
    partial void OnTotalChanged();
    #endregion
	
	public Order()
	{
		OnCreated();
	}
	
	[Column(Storage="_OrderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int OrderID
	{
		get
		{
			return this._OrderID;
		}
		set
		{
			if ((this._OrderID != value))
			{
				this.OnOrderIDChanging(value);
				this.SendPropertyChanging();
				this._OrderID = value;
				this.SendPropertyChanged("OrderID");
				this.OnOrderIDChanged();
			}
		}
	}
	
	[Column(Storage="_OrderDate", DbType="DateTime NOT NULL")]
	public System.DateTime OrderDate
	{
		get
		{
			return this._OrderDate;
		}
		set
		{
			if ((this._OrderDate != value))
			{
				this.OnOrderDateChanging(value);
				this.SendPropertyChanging();
				this._OrderDate = value;
				this.SendPropertyChanged("OrderDate");
				this.OnOrderDateChanged();
			}
		}
	}
	
	[Column(Storage="_OrderSentDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> OrderSentDate
	{
		get
		{
			return this._OrderSentDate;
		}
		set
		{
			if ((this._OrderSentDate != value))
			{
				this.OnOrderSentDateChanging(value);
				this.SendPropertyChanging();
				this._OrderSentDate = value;
				this.SendPropertyChanged("OrderSentDate");
				this.OnOrderSentDateChanged();
			}
		}
	}
	
	[Column(Storage="_MemberName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string MemberName
	{
		get
		{
			return this._MemberName;
		}
		set
		{
			if ((this._MemberName != value))
			{
				this.OnMemberNameChanging(value);
				this.SendPropertyChanging();
				this._MemberName = value;
				this.SendPropertyChanged("MemberName");
				this.OnMemberNameChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Address", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[Column(Storage="_County", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string County
	{
		get
		{
			return this._County;
		}
		set
		{
			if ((this._County != value))
			{
				this.OnCountyChanging(value);
				this.SendPropertyChanging();
				this._County = value;
				this.SendPropertyChanged("County");
				this.OnCountyChanged();
			}
		}
	}
	
	[Column(Storage="_PostCode", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
	public string PostCode
	{
		get
		{
			return this._PostCode;
		}
		set
		{
			if ((this._PostCode != value))
			{
				this.OnPostCodeChanging(value);
				this.SendPropertyChanging();
				this._PostCode = value;
				this.SendPropertyChanged("PostCode");
				this.OnPostCodeChanged();
			}
		}
	}
	
	[Column(Storage="_Country", DbType="NChar(10) NOT NULL", CanBeNull=false)]
	public string Country
	{
		get
		{
			return this._Country;
		}
		set
		{
			if ((this._Country != value))
			{
				this.OnCountryChanging(value);
				this.SendPropertyChanging();
				this._Country = value;
				this.SendPropertyChanged("Country");
				this.OnCountryChanged();
			}
		}
	}
	
	[Column(Storage="_SubTotal", DbType="Money")]
	public System.Nullable<decimal> SubTotal
	{
		get
		{
			return this._SubTotal;
		}
		set
		{
			if ((this._SubTotal != value))
			{
				this.OnSubTotalChanging(value);
				this.SendPropertyChanging();
				this._SubTotal = value;
				this.SendPropertyChanged("SubTotal");
				this.OnSubTotalChanged();
			}
		}
	}
	
	[Column(Storage="_Discount", DbType="Money")]
	public System.Nullable<decimal> Discount
	{
		get
		{
			return this._Discount;
		}
		set
		{
			if ((this._Discount != value))
			{
				this.OnDiscountChanging(value);
				this.SendPropertyChanging();
				this._Discount = value;
				this.SendPropertyChanged("Discount");
				this.OnDiscountChanged();
			}
		}
	}
	
	[Column(Storage="_Total", DbType="Money")]
	public System.Nullable<decimal> Total
	{
		get
		{
			return this._Total;
		}
		set
		{
			if ((this._Total != value))
			{
				this.OnTotalChanging(value);
				this.SendPropertyChanging();
				this._Total = value;
				this.SendPropertyChanged("Total");
				this.OnTotalChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Products")]
public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ProductID;
	
	private string _Name;
	
	private string _Description;
	
	private decimal _Price;
	
	private string _PictureURL;
	
	private System.Nullable<int> _CatgryId;
	
	private string _UserName;
	
	private string _ISBN;
	
	private EntityRef<ProductCategory> _ProductCategory;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnPictureURLChanging(string value);
    partial void OnPictureURLChanged();
    partial void OnCatgryIdChanging(System.Nullable<int> value);
    partial void OnCatgryIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnISBNChanging(string value);
    partial void OnISBNChanged();
    #endregion
	
	public Product()
	{
		this._ProductCategory = default(EntityRef<ProductCategory>);
		OnCreated();
	}
	
	[Column(Storage="_ProductID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ProductID
	{
		get
		{
			return this._ProductID;
		}
		set
		{
			if ((this._ProductID != value))
			{
				this.OnProductIDChanging(value);
				this.SendPropertyChanging();
				this._ProductID = value;
				this.SendPropertyChanged("ProductID");
				this.OnProductIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="VarChar(255)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Column(Storage="_Price", DbType="Money NOT NULL")]
	public decimal Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this.OnPriceChanging(value);
				this.SendPropertyChanging();
				this._Price = value;
				this.SendPropertyChanged("Price");
				this.OnPriceChanged();
			}
		}
	}
	
	[Column(Storage="_PictureURL", DbType="VarChar(255)")]
	public string PictureURL
	{
		get
		{
			return this._PictureURL;
		}
		set
		{
			if ((this._PictureURL != value))
			{
				this.OnPictureURLChanging(value);
				this.SendPropertyChanging();
				this._PictureURL = value;
				this.SendPropertyChanged("PictureURL");
				this.OnPictureURLChanged();
			}
		}
	}
	
	[Column(Storage="_CatgryId", DbType="Int")]
	public System.Nullable<int> CatgryId
	{
		get
		{
			return this._CatgryId;
		}
		set
		{
			if ((this._CatgryId != value))
			{
				if (this._ProductCategory.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCatgryIdChanging(value);
				this.SendPropertyChanging();
				this._CatgryId = value;
				this.SendPropertyChanged("CatgryId");
				this.OnCatgryIdChanged();
			}
		}
	}
	
	[Column(Storage="_UserName", DbType="NChar(10)")]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this.OnUserNameChanging(value);
				this.SendPropertyChanging();
				this._UserName = value;
				this.SendPropertyChanged("UserName");
				this.OnUserNameChanged();
			}
		}
	}
	
	[Column(Storage="_ISBN", DbType="NVarChar(50)")]
	public string ISBN
	{
		get
		{
			return this._ISBN;
		}
		set
		{
			if ((this._ISBN != value))
			{
				this.OnISBNChanging(value);
				this.SendPropertyChanging();
				this._ISBN = value;
				this.SendPropertyChanged("ISBN");
				this.OnISBNChanged();
			}
		}
	}
	
	[Association(Name="ProductCategory_Product", Storage="_ProductCategory", ThisKey="CatgryId", IsForeignKey=true)]
	public ProductCategory ProductCategory
	{
		get
		{
			return this._ProductCategory.Entity;
		}
		set
		{
			ProductCategory previousValue = this._ProductCategory.Entity;
			if (((previousValue != value) 
						|| (this._ProductCategory.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ProductCategory.Entity = null;
					previousValue.Products.Remove(this);
				}
				this._ProductCategory.Entity = value;
				if ((value != null))
				{
					value.Products.Add(this);
					this._CatgryId = value.CategoryId;
				}
				else
				{
					this._CatgryId = default(Nullable<int>);
				}
				this.SendPropertyChanged("ProductCategory");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.OrderLines")]
public partial class OrderLine : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _OrderLineID;
	
	private int _OrderID;
	
	private int _ProductID;
	
	private short _Quantity;
	
	private decimal _Price;
	
	private string _UserName;
	
	private System.Nullable<System.DateTime> _OrderDate;
	
	private string _ProductName;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderLineIDChanging(int value);
    partial void OnOrderLineIDChanged();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnQuantityChanging(short value);
    partial void OnQuantityChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnOrderDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOrderDateChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    #endregion
	
	public OrderLine()
	{
		OnCreated();
	}
	
	[Column(Storage="_OrderLineID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int OrderLineID
	{
		get
		{
			return this._OrderLineID;
		}
		set
		{
			if ((this._OrderLineID != value))
			{
				this.OnOrderLineIDChanging(value);
				this.SendPropertyChanging();
				this._OrderLineID = value;
				this.SendPropertyChanged("OrderLineID");
				this.OnOrderLineIDChanged();
			}
		}
	}
	
	[Column(Storage="_OrderID", DbType="Int NOT NULL")]
	public int OrderID
	{
		get
		{
			return this._OrderID;
		}
		set
		{
			if ((this._OrderID != value))
			{
				this.OnOrderIDChanging(value);
				this.SendPropertyChanging();
				this._OrderID = value;
				this.SendPropertyChanged("OrderID");
				this.OnOrderIDChanged();
			}
		}
	}
	
	[Column(Storage="_ProductID", DbType="Int NOT NULL")]
	public int ProductID
	{
		get
		{
			return this._ProductID;
		}
		set
		{
			if ((this._ProductID != value))
			{
				this.OnProductIDChanging(value);
				this.SendPropertyChanging();
				this._ProductID = value;
				this.SendPropertyChanged("ProductID");
				this.OnProductIDChanged();
			}
		}
	}
	
	[Column(Storage="_Quantity", DbType="SmallInt NOT NULL")]
	public short Quantity
	{
		get
		{
			return this._Quantity;
		}
		set
		{
			if ((this._Quantity != value))
			{
				this.OnQuantityChanging(value);
				this.SendPropertyChanging();
				this._Quantity = value;
				this.SendPropertyChanged("Quantity");
				this.OnQuantityChanged();
			}
		}
	}
	
	[Column(Storage="_Price", DbType="Money NOT NULL")]
	public decimal Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this.OnPriceChanging(value);
				this.SendPropertyChanging();
				this._Price = value;
				this.SendPropertyChanged("Price");
				this.OnPriceChanged();
			}
		}
	}
	
	[Column(Storage="_UserName", DbType="NVarChar(50)")]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this.OnUserNameChanging(value);
				this.SendPropertyChanging();
				this._UserName = value;
				this.SendPropertyChanged("UserName");
				this.OnUserNameChanged();
			}
		}
	}
	
	[Column(Storage="_OrderDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> OrderDate
	{
		get
		{
			return this._OrderDate;
		}
		set
		{
			if ((this._OrderDate != value))
			{
				this.OnOrderDateChanging(value);
				this.SendPropertyChanging();
				this._OrderDate = value;
				this.SendPropertyChanged("OrderDate");
				this.OnOrderDateChanged();
			}
		}
	}
	
	[Column(Storage="_ProductName", DbType="NVarChar(50)")]
	public string ProductName
	{
		get
		{
			return this._ProductName;
		}
		set
		{
			if ((this._ProductName != value))
			{
				this.OnProductNameChanging(value);
				this.SendPropertyChanging();
				this._ProductName = value;
				this.SendPropertyChanged("ProductName");
				this.OnProductNameChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
